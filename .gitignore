//detecting the cycle

//represention of the graph in linked list
#include<iostream>
using namespace std;


struct edge;
struct vertex
{
	int value;
	vertex * next;
	edge * addr;
};

struct edge
{
	int data;
	int weight;
	edge * addr;
};

vertex * v=NULL;
int cycle(vertex * temp);
int search(int a,int b)
{
	vertex * temp=v;
	int s=0;
	while(temp!=NULL)
	{
		if(temp->value==a)
		s=s+1;
		else
		if(temp->value==b)
		s=s+1;
		
		temp=temp->next;
	}
	if(s==2)
	return 1;
	else
	return 0;
}
struct vertex * find(int a)
{
	vertex * temp=v;
	
	while(temp!=NULL)
	{
		if(temp->value==a)
		return temp;
		
		temp=temp->next;
	}
	cout<<"\nthe vertex "<<a<<" is not found\n";
}
int create(struct vertex * temp,int b,int c)
{
	if(temp->addr==NULL)
	{
		temp->addr=new(edge);
		temp->addr->data=b;
		temp->addr->weight=c;
		temp->addr->addr=NULL;
	}
	else
	{
	edge * temp1=temp->addr;
	while(temp1->addr!=NULL)
	{
		cout<<"d";
		temp1=temp1->addr;
		cout<<"e";
	}
	temp1->addr=new(edge);
	temp1->addr->data=b;
	temp1->addr->weight=c;
	temp1->addr->addr=NULL;
	
}
}

int insert(int a,int b,int c)
{
	if(v==NULL)
	{
		cout<<"\nno vertex found \n";
		return 1;
	}
	if(search(a,b)==1)
	{
		cout<<"a";
		vertex * temp=find(a);
		cout<<"b";
		create(temp,b,c);
		cout<<"c";
	}
	else
	cout<<"\nthe vertex should be present \n";
}
int add(int a)
{
	if(v==NULL)
	{
		v=new(vertex);
		v->value=a;
		v->addr=NULL;
		v->next=NULL;
	}
	else
	{
	vertex * temp=v;
	while(temp->next!=NULL)
	{
		temp=temp->next;
	}
	temp->next=new(vertex);
	temp->next->value=a;
	temp->next->addr=NULL;
	temp->next->next=NULL;
	
}
}

int display()
{
	vertex *temp=v;
	
	if(v==NULL)
	{
		cout<<"\nno vertex found\n";
		return 1;
	}
	while(temp!=NULL)
	{
		cout<<temp->value<<"\t";
		edge * t=temp->addr;
		while(t!=NULL)
		{
			cout<<t->data<<":"<<t->weight<<"  ";
			t=t->addr;
		}
		cout<<"\n";
		temp=temp->next;
	}
}

int detect(edge * temp1)
{
	if(temp1==NULL)
	return 0;
	
	cycle(find(temp1->data));
	
	
	detect(temp1->addr);
}

int cycle(vertex * temp)
{
	if(temp==NULL)
	return 0;

	if(temp->value==detect(temp->addr))	
	
//	detect(temp->addr);
	
	cycle(temp->next);
}

int detect_cycle()
{
	vertex * temp=v;
	
	int ss=cycle(temp);
	
}


int main()
{
	
	
	while(1)
	{
		int s;
		cout<<"\nenter\n1 for inserting the edge betwen the node\n2 for adding the new node\n3 for displaying the\n";
		cin>>s;
		switch(s)
		{
			case 1:
				{
					int a,b,c;
					cout<<"\nenter the 1st node :";
					cin>>a;
					cout<<"enter the 2nd node :";
					cin>>b;
					cout<<"enter the weight :";
					cin>>c;
					insert(a,b,c);
					break;
				}
				case 2:
					{
						int c;
						cout<<"enter the node value to add :";
						cin>>c;
						add(c);
						break;
						
					}
					case 3:
						{
							
							cout<<"\ndisplaying the graph in list\n";
							display();
							break;
						}
						default:
						cout<<"wrong number :please try again\n";
		}
		
		
	}
	
	cout<<"\nis there any cycle :";
	if(detect_cycle()==1)
	cout<<"\nyes\n";
	else
	cout<<"\nno\n";
}
